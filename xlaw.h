static u_int8_t reversebits[0x100] = {
  0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0,
  0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,
  0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8,
  0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,
  0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4,
  0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,
  0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec,
  0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,
  0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2,
  0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,
  0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea,
  0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,
  0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6,
  0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,
  0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee,
  0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,
  0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1,
  0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,
  0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9,
  0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,
  0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5,
  0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,
  0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed,
  0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,
  0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3,
  0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
  0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb,
  0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
  0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7,
  0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
  0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef,
  0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff
};

/* NOTE: table index is bit-reversed */

static int16_t capi_ulaw_to_signed[0x100] = {
  0x8284, 0x7d7c, 0xf8a4, 0x075c, 0xe104, 0x1efc, 0xfe8c, 0x0174,
  0xc184, 0x3e7c, 0xfc94, 0x036c, 0xf0c4, 0x0f3c, 0xff88, 0x0078,
  0xa284, 0x5d7c, 0xfaa4, 0x055c, 0xe904, 0x16fc, 0xff0c, 0x00f4,
  0xd184, 0x2e7c, 0xfd94, 0x026c, 0xf4c4, 0x0b3c, 0xffc8, 0x0038,
  0x9284, 0x6d7c, 0xf9a4, 0x065c, 0xe504, 0x1afc, 0xfecc, 0x0134,
  0xc984, 0x367c, 0xfd14, 0x02ec, 0xf2c4, 0x0d3c, 0xffa8, 0x0058,
  0xb284, 0x4d7c, 0xfba4, 0x045c, 0xed04, 0x12fc, 0xff4c, 0x00b4,
  0xd984, 0x267c, 0xfe14, 0x01ec, 0xf6c4, 0x093c, 0xffe8, 0x0018,
  0x8a84, 0x757c, 0xf924, 0x06dc, 0xe304, 0x1cfc, 0xfeac, 0x0154,
  0xc584, 0x3a7c, 0xfcd4, 0x032c, 0xf1c4, 0x0e3c, 0xff98, 0x0068,
  0xaa84, 0x557c, 0xfb24, 0x04dc, 0xeb04, 0x14fc, 0xff2c, 0x00d4,
  0xd584, 0x2a7c, 0xfdd4, 0x022c, 0xf5c4, 0x0a3c, 0xffd8, 0x0028,
  0x9a84, 0x657c, 0xfa24, 0x05dc, 0xe704, 0x18fc, 0xfeec, 0x0114,
  0xcd84, 0x327c, 0xfd54, 0x02ac, 0xf3c4, 0x0c3c, 0xffb8, 0x0048,
  0xba84, 0x457c, 0xfc24, 0x03dc, 0xef04, 0x10fc, 0xff6c, 0x0094,
  0xdd84, 0x227c, 0xfe54, 0x01ac, 0xf7c4, 0x083c, 0xfff8, 0x0008,
  0x8684, 0x797c, 0xf8e4, 0x071c, 0xe204, 0x1dfc, 0xfe9c, 0x0164,
  0xc384, 0x3c7c, 0xfcb4, 0x034c, 0xf144, 0x0ebc, 0xff90, 0x0070,
  0xa684, 0x597c, 0xfae4, 0x051c, 0xea04, 0x15fc, 0xff1c, 0x00e4,
  0xd384, 0x2c7c, 0xfdb4, 0x024c, 0xf544, 0x0abc, 0xffd0, 0x0030,
  0x9684, 0x697c, 0xf9e4, 0x061c, 0xe604, 0x19fc, 0xfedc, 0x0124,
  0xcb84, 0x347c, 0xfd34, 0x02cc, 0xf344, 0x0cbc, 0xffb0, 0x0050,
  0xb684, 0x497c, 0xfbe4, 0x041c, 0xee04, 0x11fc, 0xff5c, 0x00a4,
  0xdb84, 0x247c, 0xfe34, 0x01cc, 0xf744, 0x08bc, 0xfff0, 0x0010,
  0x8e84, 0x717c, 0xf964, 0x069c, 0xe404, 0x1bfc, 0xfebc, 0x0144,
  0xc784, 0x387c, 0xfcf4, 0x030c, 0xf244, 0x0dbc, 0xffa0, 0x0060,
  0xae84, 0x517c, 0xfb64, 0x049c, 0xec04, 0x13fc, 0xff3c, 0x00c4,
  0xd784, 0x287c, 0xfdf4, 0x020c, 0xf644, 0x09bc, 0xffe0, 0x0020,
  0x9e84, 0x617c, 0xfa64, 0x059c, 0xe804, 0x17fc, 0xfefc, 0x0104,
  0xcf84, 0x307c, 0xfd74, 0x028c, 0xf444, 0x0bbc, 0xffc0, 0x0040,
  0xbe84, 0x417c, 0xfc64, 0x039c, 0xf004, 0x0ffc, 0xff7c, 0x0084,
  0xdf84, 0x207c, 0xfe74, 0x018c, 0xf844, 0x07bc, 0x0000, 0x0000
};

/* NOTE: returns a bit-reversed value */

static u_int8_t
capi_signed_to_ulaw(int32_t temp)
{
    u_int8_t mask;
    u_int8_t value;

    if(temp <= -32124)
    {
	value = 0x00;
	goto done;
    }

    if(temp >= 32124)
    {
	value = 0x01;
	goto done;
    }

    /*
     * search u-law value for temp, to save memory 
     */
    if(temp < 0)
    {
        value = 0x00;
	mask = 0x02;

	do {
	    value |= mask;

	    if(temp < capi_ulaw_to_signed[value])
	    {
	        value ^= mask;
	    }
	  } while(mask <<= 1);
      }
      else
      {
	  value = 0x01;
	  mask = 0x02;

	  do {
	    value |= mask;

	    if(temp > capi_ulaw_to_signed[value])
	    {
	        value ^= mask;
	    }
	  } while(mask <<= 1);
      }

  done:

    return value;
}

/* NOTE: table index is bit-reversed */

static int16_t capi_alaw_to_signed[0x100] = {
  0x13fc, 0xec04, 0x0144, 0xfebc, 0x517c, 0xae84, 0x051c, 0xfae4,
  0x0a3c, 0xf5c4, 0x0048, 0xffb8, 0x287c, 0xd784, 0x028c, 0xfd74,
  0x1bfc, 0xe404, 0x01cc, 0xfe34, 0x717c, 0x8e84, 0x071c, 0xf8e4,
  0x0e3c, 0xf1c4, 0x00c4, 0xff3c, 0x387c, 0xc784, 0x039c, 0xfc64,
  0x0ffc, 0xf004, 0x0104, 0xfefc, 0x417c, 0xbe84, 0x041c, 0xfbe4,
  0x083c, 0xf7c4, 0x0008, 0xfff8, 0x207c, 0xdf84, 0x020c, 0xfdf4,
  0x17fc, 0xe804, 0x018c, 0xfe74, 0x617c, 0x9e84, 0x061c, 0xf9e4,
  0x0c3c, 0xf3c4, 0x0084, 0xff7c, 0x307c, 0xcf84, 0x030c, 0xfcf4,
  0x15fc, 0xea04, 0x0164, 0xfe9c, 0x597c, 0xa684, 0x059c, 0xfa64,
  0x0b3c, 0xf4c4, 0x0068, 0xff98, 0x2c7c, 0xd384, 0x02cc, 0xfd34,
  0x1dfc, 0xe204, 0x01ec, 0xfe14, 0x797c, 0x8684, 0x07bc, 0xf844,
  0x0f3c, 0xf0c4, 0x00e4, 0xff1c, 0x3c7c, 0xc384, 0x03dc, 0xfc24,
  0x11fc, 0xee04, 0x0124, 0xfedc, 0x497c, 0xb684, 0x049c, 0xfb64,
  0x093c, 0xf6c4, 0x0028, 0xffd8, 0x247c, 0xdb84, 0x024c, 0xfdb4,
  0x19fc, 0xe604, 0x01ac, 0xfe54, 0x697c, 0x9684, 0x069c, 0xf964,
  0x0d3c, 0xf2c4, 0x00a4, 0xff5c, 0x347c, 0xcb84, 0x034c, 0xfcb4,
  0x12fc, 0xed04, 0x0134, 0xfecc, 0x4d7c, 0xb284, 0x04dc, 0xfb24,
  0x09bc, 0xf644, 0x0038, 0xffc8, 0x267c, 0xd984, 0x026c, 0xfd94,
  0x1afc, 0xe504, 0x01ac, 0xfe54, 0x6d7c, 0x9284, 0x06dc, 0xf924,
  0x0dbc, 0xf244, 0x00b4, 0xff4c, 0x367c, 0xc984, 0x036c, 0xfc94,
  0x0f3c, 0xf0c4, 0x00f4, 0xff0c, 0x3e7c, 0xc184, 0x03dc, 0xfc24,
  0x07bc, 0xf844, 0x0008, 0xfff8, 0x1efc, 0xe104, 0x01ec, 0xfe14,
  0x16fc, 0xe904, 0x0174, 0xfe8c, 0x5d7c, 0xa284, 0x05dc, 0xfa24,
  0x0bbc, 0xf444, 0x0078, 0xff88, 0x2e7c, 0xd184, 0x02ec, 0xfd14,
  0x14fc, 0xeb04, 0x0154, 0xfeac, 0x557c, 0xaa84, 0x055c, 0xfaa4,
  0x0abc, 0xf544, 0x0058, 0xffa8, 0x2a7c, 0xd584, 0x02ac, 0xfd54,
  0x1cfc, 0xe304, 0x01cc, 0xfe34, 0x757c, 0x8a84, 0x075c, 0xf8a4,
  0x0ebc, 0xf144, 0x00d4, 0xff2c, 0x3a7c, 0xc584, 0x039c, 0xfc64,
  0x10fc, 0xef04, 0x0114, 0xfeec, 0x457c, 0xba84, 0x045c, 0xfba4,
  0x08bc, 0xf744, 0x0018, 0xffe8, 0x227c, 0xdd84, 0x022c, 0xfdd4,
  0x18fc, 0xe704, 0x018c, 0xfe74, 0x657c, 0x9a84, 0x065c, 0xf9a4,
  0x0cbc, 0xf344, 0x0094, 0xff6c, 0x327c, 0xcd84, 0x032c, 0xfcd4
};

/* NOTE: table index and returned result 
 * is bit-reversed!
 */
static u_int8_t capi_ulaw_to_alaw[0x100] = {
  0x54, 0x55, 0x16, 0x17, 0x50, 0x51, 0x42, 0x43, 
  0x5c, 0x5d, 0x7e, 0x7f, 0xd8, 0xd9, 0x4a, 0x4b, 
  0x44, 0x45, 0x06, 0x07, 0x40, 0x41, 0x5a, 0x5b, 
  0x4c, 0x4d, 0x6e, 0x6f, 0xc8, 0xc9, 0x6a, 0x6b, 
  0x74, 0x75, 0x36, 0x37, 0x70, 0x71, 0x62, 0x63, 
  0x7c, 0x7d, 0x4e, 0x4f, 0xf8, 0xf9, 0x0a, 0x0b, 
  0x64, 0x65, 0x26, 0x27, 0x60, 0x61, 0x7a, 0x7b, 
  0x6c, 0x6d, 0xd2, 0xd3, 0xe8, 0xe9, 0x2a, 0x2b, 
  0x14, 0x15, 0x76, 0x77, 0x10, 0x11, 0x02, 0x03, 
  0x1c, 0x1d, 0x3e, 0x3f, 0x98, 0x99, 0xca, 0xcb, 
  0x04, 0x05, 0x66, 0x67, 0x00, 0x01, 0x1a, 0x1b, 
  0x0c, 0x0d, 0x2e, 0x2f, 0x88, 0x89, 0xea, 0xeb, 
  0x34, 0x35, 0x46, 0x47, 0x30, 0x31, 0x22, 0x23, 
  0x3c, 0x3d, 0x0e, 0x0f, 0xb8, 0xb9, 0x8a, 0x8b, 
  0x24, 0x25, 0x5e, 0x5f, 0x20, 0x21, 0x3a, 0x3b, 
  0x2c, 0x2d, 0xf2, 0xf3, 0xa8, 0xa9, 0xaa, 0xab, 
  0xd4, 0xd5, 0x96, 0x97, 0xd0, 0xd1, 0xc2, 0xc3, 
  0xdc, 0xdd, 0xfe, 0xff, 0x18, 0x19, 0x4a, 0x4b, 
  0xc4, 0xc5, 0x86, 0x87, 0xc0, 0xc1, 0xda, 0xdb, 
  0xcc, 0xcd, 0xee, 0xef, 0x08, 0x09, 0x6a, 0x6b, 
  0xf4, 0xf5, 0xb6, 0xb7, 0xf0, 0xf1, 0xe2, 0xe3, 
  0xfc, 0xfd, 0xce, 0xcf, 0x38, 0x39, 0x0a, 0x0b, 
  0xe4, 0xe5, 0xa6, 0xa7, 0xe0, 0xe1, 0xfa, 0xfb, 
  0xec, 0xed, 0x92, 0x93, 0x28, 0x29, 0x2a, 0x2b, 
  0x94, 0x95, 0xf6, 0xf7, 0x90, 0x91, 0x82, 0x83, 
  0x9c, 0x9d, 0xbe, 0xbf, 0x78, 0x79, 0xca, 0xcb, 
  0x84, 0x85, 0xe6, 0xe7, 0x80, 0x81, 0x9a, 0x9b, 
  0x8c, 0x8d, 0xae, 0xaf, 0x68, 0x69, 0xea, 0xeb, 
  0xb4, 0xb5, 0xc6, 0xc7, 0xb0, 0xb1, 0xa2, 0xa3, 
  0xbc, 0xbd, 0x8e, 0x8f, 0x48, 0x49, 0x8a, 0x8b, 
  0xa4, 0xa5, 0x1e, 0x1f, 0xa0, 0xa1, 0xba, 0xbb, 
  0xac, 0xad, 0xb2, 0xb3, 0x56, 0x57, 0xaa, 0xab, 
};

/* NOTE: returns a bit-reversed value */

static u_int8_t
capi_signed_to_alaw(int32_t temp)
{
    return capi_ulaw_to_alaw[capi_signed_to_ulaw(-temp)];
}
